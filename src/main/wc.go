package main

import (
	"fmt"
	"mapreduce"
	"os"
    "strconv"
)

func isLetter(b byte) bool {
    return (b <= 'Z' && b >= 'A') || (b <= 'z' && b >= 'a')
}

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	// TODO: you have to write this function
    res := make([]mapreduce.KeyValue, 0)
    index := 0
    for index < len(contents) && !isLetter(contents[index]) {
        index += 1
    }
    last_index := index
    for index < len(contents) {
        if !isLetter(contents[index]) {
            res = append(res, mapreduce.KeyValue{contents[last_index:index], "1"})
        } else {
            index += 1
            continue
        }
        for index < len(contents) && !isLetter(contents[index]) {
            index += 1
        }
        last_index = index
    }
    if isLetter(contents[index - 1]) {
        res = append(res, mapreduce.KeyValue{contents[last_index:index], "1"})
    }
    return res
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
    res := 0
    for _, s := range values {
        i, _ := strconv.Atoi(s)
        res += i
    }
    return strconv.Itoa(res)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
